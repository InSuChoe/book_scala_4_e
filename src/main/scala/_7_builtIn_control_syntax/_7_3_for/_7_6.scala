package _7_builtIn_control_syntax._7_3_for

//  앞의 예제에서 for 표현식은 반복 단계마다
//  9부터 filesHere.length - 1 사이의 각 정수를 변수 1에 설정한 다음,
//  설정한 i를 사용해 filesHere의 1번째 원소를 구해서 처리한다.
//  이와 같은 반복 처리가 스칼라에서 일반적이지 않은 이유는
//  간단하게 컬렉션을 직접 이터레이션할 수 있기 때문이다.
//  컬렉션을 직접 이터레이션하면 코드도 더욱 짧아지고
//  배열을 이터레이션하면서 인덱스를 잘못 처리해 발생할 수 있는 실수를 피할 수 있다.
//  0에서 시작할지, 1에서 시작할지, +1을 더할지. -1을 더할지,
//  마지막 이터레이 션에서 특별한 처리는 안 해도 되는지
//  등의 의문은 풀기 어렵지는 않지만 틀리기가 쉽다.
//  이러한 질문을 아예 피한다면 훨씬 안전할 것이다.

//  필터링

//  컬렉션의 모든 원소를 이터레이션하고 싶지 않은 경우도 많다.
//  체 컬렉션을 걸러내서 그 일부만 사용하고 싶은 경우가 그렇다.
//  for 표현식에 필터
//  ('를 추가하면 가능하다. 예를 들어,
//  리스트 7.6의 코드는 현재 디렉토리에서 이름이 'scala'로 끝나는 파일만 표시한다.)
//
//  리스트 7.6 필터를 이용해 scala 파일 찾기
object _7_6 {
  def main(args: Array[String]): Unit = {
    val filesHere = (new java.io.File(".")).listFiles

    for(file <- filesHere if file.getName.endsWith(".scala"))
      println(file)
  }
}
